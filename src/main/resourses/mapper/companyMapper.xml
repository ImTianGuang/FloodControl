<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tian.cloud.service.dao.mapper.CompanyMapper" >
    <resultMap id="BaseResultMap" type="com.tian.cloud.service.dao.entity.Company" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="post_code" property="postCode" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="record_person" property="recordPerson" jdbcType="VARCHAR" />
        <result column="record_person_phone" property="recordPersonPhone" jdbcType="VARCHAR" />
        <result column="check_person" property="checkPerson" jdbcType="VARCHAR" />
        <result column="check_person_phone" property="checkPersonPhone" jdbcType="VARCHAR" />
        <result column="flood_manager" property="floodManager" jdbcType="VARCHAR" />
        <result column="flood_manager_phone" property="floodManagerPhone" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="BIGINT" />
        <result column="update_time" property="updateTime" jdbcType="BIGINT" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, name, address, post_code, email, record_person, record_person_phone, check_person, check_person_phone, status, create_time, update_time,flood_plan,flood_manager,flood_manager_phone
    </sql>

    <insert id="insertBatch" parameterType="list">
        insert into company
        (name, address, post_code, email, record_person, record_person_phone, check_person, check_person_phone, status, create_time, update_time,flood_plan)
        values
        <foreach collection="saveList" item="company" separator=",">
            (#{company.name},#{company.address},#{company.postCode},#{company.email},#{company.recordPerson},#{company.recordPersonPhone},#{company.checkPerson},#{company.checkPersonPhone},#{company.status},#{company.createTime},#{company.updateTime},#{company.floodPlan})
        </foreach>
    </insert>

    <select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from company
        where id = #{id} and status = 1
    </select>

    <select id="selectByIdList" resultMap="BaseResultMap" parameterType="list">
        select
        <include refid="Base_Column_List"/>
        from
        company
        <where>
            id in
            <foreach collection="idList" item="id" open="(" close=")" separator=",">
                #{id}
            </foreach>
        </where>
    </select>
    <select id="selectByName" resultMap="BaseResultMap" parameterType="String">
        select
        <include refid="Base_Column_List" />
        from company
        where name = #{name} and status = 1
    </select>

    <select id="selectAllUsable" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from company
        where
        status = 1
        order by name
    </select>

    <select id="selectAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from company
        order by name
    </select>

    <select id="search" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from company
        <where>
            name like CONCAT('%', #{companyName}, '%')
            and status = 1
        </where>
        order by name
    </select>

    <update id="updateCompany" parameterType="com.tian.cloud.service.dao.entity.Company">
        update
        company
        set
        name = #{name},
        address = #{address},
        post_code = #{postCode},
        email = #{email},
        record_person = #{recordPerson},
        record_person_phone = #{recordPersonPhone},
        check_person = #{checkPerson},
        check_person_phone = #{checkPersonPhone},
        status = #{status},
        update_time = #{updateTime},
        flood_plan = #{floodPlan},
        flood_manager_phone = #{floodManagerPhone},
        flood_manager = #{floodManager}
        <where>
            id = #{id}
        </where>
    </update>
</mapper>