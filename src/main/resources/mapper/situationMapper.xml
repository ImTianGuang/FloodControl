<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tian.cloud.service.dao.mapper.SituationMapper" >
    <resultMap id="BaseResultMap" type="com.tian.cloud.service.dao.entity.FloodSituation" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="company_id" property="companyId" jdbcType="VARCHAR" />
        <result column="status" property="status" jdbcType="VARCHAR" />
        <result column="start_time" property="startTime" jdbcType="VARCHAR" />
        <result column="end_time" property="endTime" jdbcType="VARCHAR" />
        <result column="title" property="title" jdbcType="VARCHAR" />
        <result column="flood_desc" property="floodDesc" jdbcType="VARCHAR" />
        <result column="attatch" property="attatch" jdbcType="VARCHAR" />
        <result column="photos" property="photos" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="BIGINT" />
        <result column="update_time" property="updateTime" jdbcType="BIGINT" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, company_id, status, start_time, end_time, title, flood_desc, create_time, update_time, attatch, photos
    </sql>

    <insert id="save" parameterType="list" useGeneratedKeys="true" keyProperty="id">
        insert into flood_situation
        (company_id, status, start_time, end_time, title, flood_desc, create_time, update_time)
        values
        (#{companyId}, #{status}, #{startTime}, #{endTime}, #{title}, #{floodDesc}, #{createTime}, #{updateTime})
    </insert>

    <select id="getById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select
        <include refid="Base_Column_List" />
        from flood_situation
        where id = #{id} and status = 1
    </select>

    <select id="search" parameterType="com.tian.cloud.service.controller.request.CommonSearchReq" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from flood_situation
        <where>
            <if test="keyword != null and keyword != ''">
                (
                title like CONCAT('%', #{keyword}, '%')
                or
                flood_desc like CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="startId != null">
                and <![CDATA[ id < #{startId} ]]>
            </if>
            <if test="startTime != null">
                and create_time >= #{startTime}
            </if>
            <if test="endTime != null">
                and <![CDATA[ create_time <= #{endTime} ]]>
            </if>
            <if test="1 == 1">
                and status = 1
            </if>
        </where>
        order by id desc
        <if test="len != null">
            limit #{len}
        </if>
    </select>

    <update id="deleteById" parameterType="int">
        update
        flood_situation
        set
        status = 0
        where
        id = #{id}
    </update>

    <update id="update" parameterType="com.tian.cloud.service.dao.entity.FloodSituation">
        update
        flood_situation
        set
        company_id = #{companyId},
        status = #{status},
        start_time = #{startTime},
        end_time = #{endTime},
        title = #{title},
        flood_desc = #{floodDesc},
        update_time = #{updateTime}
        <where>
            id = #{id}
        </where>
    </update>

    <update id="updateSelective" parameterType="com.tian.cloud.service.dao.entity.FloodSituation">
        update
        flood_situation
        set
        <if test="attatch != null">
            attatch = #{attatch},
        </if>
        <if test="photos != null">
            photos = #{photos}
        </if>
        update_time = #{updateTime}
        where
        id = #{id}
    </update>
</mapper>